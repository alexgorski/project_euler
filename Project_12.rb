# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?
require 'pry'
class Triangle

  def make_triangles(t=0,n=0)
    t = t + 1
    n += t
    
    
    while self.num_factors(n,t) < 501
      t = t + 1
      n += t
      #binding.pry
      puts "#{n}, #{t}"
    end
    puts "done: #{n}, #{t}"
  end
  def num_factors(number,total)
    @p = 0
    for i in 1..(number/2) do
    @p += 1 if number % i == 0
    end
    puts "factors:#{@p}, number:#{number}, total:#{total}"
    return @p
  end
end

t = Triangle.new
t.make_triangles